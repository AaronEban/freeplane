import java.util.concurrent.*

project.ext.emojiDir = "${project.buildDir}/emoji/resources"

sourceSets {
	emoji {
		resources {
			srcDir emojiDir
		}
	}
}

class EmojiDownloader {
	static def emojiVersion = '12.1'
	static def TWEMOJI_VERSION = '12.1.4'
	static def twemojiBaseUrl = "https://twemoji.maxcdn.com/v/$TWEMOJI_VERSION/svg/"
	static def emojiListUrl = "http://unicode.org/Public/emoji/$emojiVersion/emoji-test.txt"
	static def HEX_CODEPOINT_END_POSITION = 43
	static def STATUS_END_POSITION = 65
	static def EMOJI_POSITION = 67

	File emojiListFile
	File emojiEntriesFile
	Project project
	String emojiDir
	
	EmojiDownloader(Project project) {
		this.project = project
		this.emojiDir = "${project.emojiDir}/images/emoji"
		this.emojiListFile = project.file("$emojiDir/emojilist.txt")
		this.emojiEntriesFile = project.file("$emojiDir/emojientries.xml")
	}
	
	def run(){
		downloadEmojiList()
		downloadEmojiFiles()
		createUiEntryFile()
	}
	
	def downloadEmojiList(){
		if (!emojiListFile.exists()) {
			project.mkdir(emojiListFile.parent)
    		new URL(emojiListUrl).withInputStream{ i -> emojiListFile.withOutputStream{ it << i }}
		}
	}
	
	def downloadEmojiFiles(){
		ExecutorService exec = Executors.newFixedThreadPool(40)
		emojiListFile.eachLine { String line ->
			if(line.length() > EMOJI_POSITION  && line.charAt(HEX_CODEPOINT_END_POSITION) == ';' && line.charAt(STATUS_END_POSITION) == '#') {
 				String emojiStatus = line.substring(HEX_CODEPOINT_END_POSITION + 1, STATUS_END_POSITION).trim()
 				if(emojiStatus != 'component') {
	 				String hexCodes = line.substring(0, HEX_CODEPOINT_END_POSITION).trim()
	 				String twemojiFileName = hexCodes.toLowerCase().replace(' ', '-').replaceFirst("^00", "") + '.svg';
	 				String emojiUrl = "$twemojiBaseUrl$twemojiFileName"
	 				def emojiFile = project.file("$emojiDir/$twemojiFileName")
			 		if (!emojiFile.exists()) {
						exec.submit({
							def get = new URL(emojiUrl).openConnection();
							def getRC = get.getResponseCode();
							if(getRC.equals(200)) {
								emojiFile.withOutputStream{
									new BufferedOutputStream(it) << new BufferedInputStream(get.getInputStream())
								}
							}
						} as Runnable)
					}
				}
			}
		}
		exec.shutdown()
		if(! exec.isTerminated()) {	
			println('Wait for downloads')
			exec.awaitTermination(3600, TimeUnit.SECONDS);
		}
		println('Downloads completed')	
	}
	
	def createUiEntryFile(){
		Node root = new Node(null, 'FreeplaneEmojiEntries')
		Node group = null 
		Node subgroup = null
		Node toneSubgroup = null
		boolean firstInGroupSet = false
		boolean firstInSubgroupSet = false
		String lastEmoji = null
		emojiListFile.eachLine { String line ->
 			if(line.startsWith('# group')) {
 				group = root.appendNode('Entry')
 				group.attributes().put('name', line.substring(2))
 			}
 			else if(line.startsWith('# subgroup')) {
 				subgroup = group.appendNode('Entry')
 				subgroup.attributes().put('name', line.substring(2))
 			}
 			else if(line.length() > EMOJI_POSITION  && line.charAt(HEX_CODEPOINT_END_POSITION) == ';' && line.charAt(STATUS_END_POSITION) == '#') {
 				String hexCodes = line.substring(0, HEX_CODEPOINT_END_POSITION).trim()
 				String twemojiFileName = hexCodes.toLowerCase().replace(' ', '-').replaceFirst("^00", "") + '.svg';
 				String emojiUrl = "$twemojiBaseUrl$twemojiFileName"
 				def emojiFile = project.file("$emojiDir/$twemojiFileName")
		    	if (emojiFile.exists()) {
			 		String emoji = line.substring(EMOJI_POSITION, line.indexOf(' ', EMOJI_POSITION))
			 		Node action
			 		if(hexCodes.contains(' 1F3F')) {
			 			if (toneSubgroup == null) {
			 				toneSubgroup = subgroup.appendNode('Entry')
			 				toneSubgroup.attributes().put('name', 'tone variants')
			 				toneSubgroup.attributes().put('emoji', emoji)
			 			}
		 				action = toneSubgroup.appendNode('Entry')
 						action.attributes().put('emoji', emoji)
			 		}
			 		else {
			 			toneSubgroup = null
	 					action = subgroup.appendNode('Entry')
	 				}
	 				group.attributes().putIfAbsent('emoji', emoji)
	 				group.attributes().putIfAbsent('file', twemojiFileName)
	 				subgroup.attributes().putIfAbsent('emoji', emoji)
	 				subgroup.attributes().putIfAbsent('file', twemojiFileName)
	 				action.attributes().put('emoji', emoji)
	 				action.attributes().put('file', twemojiFileName)
	 			}	
 			}	
		}
		emojiEntriesFile.withOutputStream {new XmlNodePrinter(new PrintWriter(new OutputStreamWriter(it))).print(root)}
	}
	
}

task downloadEmoji {

	onlyIf{
		! emojiJar.archiveFile.get().asFile.exists()
	}

	doLast {
		new EmojiDownloader(project).run()
	}
}

task emojiJar(type: Jar) {
	onlyIf{
		! emojiJar.archiveFile.get().asFile.exists()
	}
	
	manifest = project.manifest {
		attributes("Manifest-Version": "1.0")
	}
	baseName = 'emoji'
	archiveVersion = EmojiDownloader.TWEMOJI_VERSION
	dependsOn downloadEmoji
    from (sourceSets.emoji.output) {
		include(['**/*.svg', '**/*.xml'])
    }
}