dependencies {
    compile project(':JOrtho_0.4_freeplane')

    compile 'commons-lang:commons-lang:2.6',
            'commons-io:commons-io:2.4',
            'commons-codec:commons-codec:1.7',
            'com.jgoodies:forms:1.2.1',
            'com.github.insubstantial:flamingo:7.2.1',
            'com.github.insubstantial:substance:7.2.1',
            'com.github.insubstantial:substance-flamingo:7.2.1',
            'com.github.insubstantial:substance-swingx:7.2.1',
            'com.github.insubstantial:trident:7.2.1'

    compile files('./lib/SimplyHTML.jar','./lib/idw-gpl.jar')
}

//pluginid = 'org.freeplane.core'

jar {
    manifest {

        name = pluginid
        symbolicName = pluginid

        ext.deps = configurations.runtime.files.collect { "lib/${it.name}" }
        ext.deps.add(0, "lib/freeplaneosgi-" + project.version + ".jar")
        // TODO: freeplanemac.jar!
        ext.deps.add(0, "lib/freeplaneeditor-" + project.version + ".jar")
        ext.deps.add(0, "lib/freeplaneviewer-" + project.version + ".jar")

        attributes 'Class-Path' : ext.deps.join(', ')
        instruction 'Bundle-Vendor', 'Freeplane Project'
        instruction 'Import-Package', 'org.osgi.framework,org.osgi.service.url;version="1.0.0"'
        instruction 'Export-Package', '*;-noimport:=true'
        //instruction 'Private-Package', '*'
        instruction 'Bundle-Activator', 'org.freeplane.main.osgi.Activator'
        instruction 'Bundle-RequiredExecutionEnvironment', 'J2SE-1.6'
    }
}

task copyOSGiJars(type: Copy) {
     from ("$buildDir/libs") {
          include("*.jar")
     }
     from ('lib') {
          include("*.jar")
     }
     into(globalBuild + '/core/' + pluginid + '/lib/')
}

task copyOSGiManifest(type: Copy) {
     from ("$buildDir/tmp/jar/") {
          include("MANIFEST.MF")
     }
     into(globalBuild + '/core/' + pluginid + '/META-INF/')
}

task viewerJar(type: Jar) {
    // use '= project.manifest' to avoid that an OSGi manifest is created!
    manifest = project.manifest {
        attributes("Manifest-Version": "1.0",
                   "Permissions": "all-permissions",
                   "Codebase": "*",
                   "Application-Library-Allowable-Codebase": "*",
                   "Application-Name": "Freeplane Viewer Applet")
    }

    baseName = 'freeplaneviewer'
    dependsOn classes
    from (sourceSets.main.output) {
        exclude('**/application/**')
        exclude('**/osgi/**')
        exclude('**/mindmapmode/**')
        exclude('**/filemode/**')
        exclude('**/ortho/**')
        exclude('**/core/resources/ui/**')
        exclude('translations/**')
    }
    from ('./viewer-resources') {
        exclude('**/appletMenu.mm')
    }
    includeEmptyDirs = false
}

task editorJar(type: Jar) {
    // use '= project.manifest' to avoid that an OSGi manifest is created!
    manifest = project.manifest {
        attributes("Manifest-Version": "1.0",
                   "Main-Class": "org.freeplane.main.application.FreeplaneMain")
    }
    baseName = 'freeplaneeditor'
    dependsOn classes
    from (sourceSets.main.output) {
				include("**/application/**")
				include("**/mindmapmode/**")
				include("**/ortho/**")
				include("**/filemode/**")
				include("**/core/resources/ui/**")
				include("translations/**")
				exclude("**/*.jar") // probably not necessary
    }
    from ('./resources') {
				exclude("**/preferences.mm")
				exclude("**/browsemodemenu.mm")
				exclude("**/mindmapmodemenu.mm")
				exclude("**/filemodemenu.mm")
				exclude("**/stylemodemenu.mm")
    }
    includeEmptyDirs = false
}

task osgiJar(type: Jar) {
    // use '= project.manifest' to avoid that an OSGi manifest is created!
    manifest = project.manifest {
        attributes("Manifest-Version": "1.0")
    }
    baseName = 'freeplaneosgi'
    dependsOn classes
    from (sourceSets.main.output) {
         include("**/osgi/**")         
    }
    includeEmptyDirs = false
}

task copyExternalResources(type: Copy) {
    from('external-resources') {
        include('**')
    }
    into(globalBuild + '/resources')
}

task copyDoc(type: Copy) {
    from('doc/') {
        include('**')
    }
    into(globalBuild + '/doc')
}

// This task calls out to ant to perform an xslt task since it is an easier
// dependency to satisfy than a seperate gradle plugin. We may wish to change
// this in the future
task build_ui_xml {
 ant.xslt(in   : file('resources/xml/mindmapmoderibbon.xml'),
          style: file('resources/xslt/ribbons2menu.xsl'),
          out  : new File('resources/xml', 'mindmapmodemenu.xml')
         )
}

jar.dependsOn viewerJar
jar.dependsOn editorJar
jar.dependsOn osgiJar
jar.dependsOn copyDeps
build.dependsOn copyOSGiJars
build.dependsOn copyOSGiManifest
build.dependsOn copyExternalResources
build.dependsOn copyDoc