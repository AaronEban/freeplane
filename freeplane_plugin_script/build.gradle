dependencies {
    compile project(':freeplane')
    // TODO: this is most probably out of date. keep the latest version in git!
    // (from libjsyntaxpane-java Debian package!)
    compile group: 'de.sciss', name: 'jsyntaxpane', version:'1.0.0'
    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.1'
}

jar {
    manifest {
        name = pluginid
        symbolicName = pluginid

        configurations.runtime.transitive = false
        ext.deps = configurations.runtime.files.collect { "lib/${it.name}" }
        ext.deps.add(0, "lib/plugin-" + project.version + '.jar')

        attributes 'Class-Path': ext.deps.join(', ')
        attributes 'Bundle-ClassPath': '., ' + ext.deps.join(', ')

        instruction 'Bundle-Vendor', 'Freeplane Project'
        instruction 'Bundle-Activator', pluginid + ".Activator"
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'

        instruction 'Import-Package', 'org.osgi.framework;version="1.3.0", org.freeplane.core.*, org.freeplane.features.*, org.freeplane.main.*, org.freeplane.n3.*, org.freeplane.view.*'

        instruction 'Export-Package', 'jsyntaxpane, jsyntaxpane.actions, jsyntaxpane.actions.gui, jsyntaxpane.components, jsyntaxpane.lexers, jsyntaxpane.syntaxkits, jsyntaxpane.util, org.freeplane.plugin.script;-noimport:=true'
        
        // Require-Bundle is ignored by bnd => replaced by Import-Package!
        //instruction 'Require-Bundle', 'org.freeplane.core;bundle-version="1.0.1"'
    }
}

task copyScripts(type: Copy) {
    from('scripts/') {
        include('**')
    }
    into(globalBuild + '/scripts')
}

javadoc {
    // we need source from both this and the freeplane project!
    //  source = sourceSets.main.allJava

    ext.javadocInputFromThisProject = fileTree(dir: 'src/main/java')
      .include('**/Proxy.java')
      .include('**/Convertible.java')
      .include('**/FreeplaneScriptBaseClass.java')
      .include('**/ScriptUtils.java')
    ext.javadocInputFromFreeplaneProject = fileTree(dir: '../freeplane/src/main/java')
      .include('**/UITools.java')
      .include('**/TextUtils.java')
      .include('**/FreeplaneVersion.java')
      .include('**/HtmlUtils.java')
      .include('**/LogUtils.java')
      .include('**/MenuUtils.java')

    source = ext.javadocInputFromThisProject + ext.javadocInputFromFreeplaneProject
    destinationDir = new File(globalBuild + '/doc/api/')
}

// TODO: this doesn't work yet!
/*
task zipJavadoc(type: Zip) {
  baseName = 'scripting-api'
  from (globalBuild + '/doc/api/') {
      include('**')
  }
  destinationDir = new File(globalBuild)
  dependsOn javadoc
}
*/

build.dependsOn copyScripts
build.dependsOn javadoc
//build.dependsOn zipJavadoc