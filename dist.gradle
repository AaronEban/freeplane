 import org.apache.tools.ant.filters.FixCrLfFilter;
 
//   <!-- For release targets. Again move to top level? -->
	// <target name="rungit" depends="mkdistdir">
	// 	<delete file="${build}/gitinfo.txt" quiet="true"/>
	// 	<delete file="${dist}/git.properties" quiet="true"/>
	// 	<exec dir="${build}" executable="git" output="${build}/gitinfo.txt"
	// 		failifexecutionfails="false" failonerror="false" logError="true"
	// 		resultproperty="gitresult">
	// 		<arg value='log'/>
	// 		<arg value='--pretty=format:git-revision=%h_%an_%ai'/>
	// 		<arg value='-n1'/>
	// 	</exec>
	// 	<condition property="gitok" value="">
	// 		<equals arg1="${gitresult}" arg2="0"/>
	// 	</condition>
	// </target>

	// <target name="git_version_info" depends="rungit" unless="giterror">
	// 	<native2ascii src="${build}" dest="${dist}" includes="gitinfo.txt" ext=".properties"/>
	// 	<replaceregexp file="${dist}/gitinfo.properties" flags="g" byline="false" match="[^\w=-]" replace="" />
	// 	<property file="${dist}/gitinfo.properties"/>
	// 	<exec dir="${build}" executable="git" output="${build}/gitinfo.txt" append="true"
  //           failifexecutionfails="false" failonerror="false" logError="true">
	// 		<arg value='branch'/>
	// 	</exec>
	// </target>

  //   <!-- publishing? -->

	// <target name="srczip" depends="mkdistdir, git_version_info">
	// 	<tempfile property="src.temp.dir" destDir="${java.io.tmpdir}" prefix="build-src" />
	// 	<mkdir dir="${src.temp.dir}" />
	// 	<copy todir="${src.temp.dir}" overwrite="true">
	// 		<fileset dir="${workspace}">
	// 			<include name="build.xml" />
	// 			<include name="freeplane/**" />
	// 			<include name="freeplane_plugin*/**" />
	// 			<include name="freeplane_ant/**" />
	// 			<include name="freeplane_mac/**" />
	// 			<include name="freeplane_framework/**" />
	// 			<include name="freeplane_devresources/**" />
	// 			<include name="JOrtho_0.4_freeplane/**" />
	// 			<include name="build.xml" />
	// 			<exclude name=".*/**" />
	// 			<exclude name="**/~*" />
	// 			<exclude name="**/signjar.properties" />
	// 			<exclude name="**/backups/**" />
	// 			<exclude name="bin/**" />
	// 			<exclude name="build/**" />
	// 			<exclude name="dist/**" />
	// 			<exclude name="*/bin/**" />
	// 			<exclude name="*/build/**" />
	// 			<exclude name="*/launcher_build/**" />
	// 			<exclude name="*/build-nodehighlighter/**" />
	// 			<exclude name="*/build4mac/**" />
	// 			<exclude name="*/dist/**" />
	// 			<exclude name="**/.backup/**" />
	// 			<exclude name="**/backups/**" />
	// 			<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
	// 			<exclude name="freeplane_framework/windows-icons/Objects/**" />
	// 			<exclude name="freeplane_framework/windows-icons/*.layout" />
	// 			<exclude name="freeplane_framework/windows-icons/Makefile.win" />

	// 			<!-- these are generated using ribbons2menu.xsl! -->
	// 			<exclude name="freeplane/resources/xml/mindmapmodemenu.xml" />

	// 		</fileset>
	// 	</copy>
	// 	<!-- fix crlf->lf so that the Linux package patches apply, no matter whether this is
	//          built on Windows or UNIX -->
	// 	<echo>Normalizing line endings to LF in ${src.temp.dir}</echo>
	// 	<fixcrlf srcDir="${src.temp.dir}" eol="lf" eof="asis" fixlast="false">
	// 		<include name="**/*.java" />
	// 		<include name="**/*.xml" />
	// 		<include name="**/*.xsl" />
	// 		<include name="**/*.mm" />
	// 		<include name="**/*.MF" />
	// 		<include name="**/*.properties" />
	// 	</fixcrlf>
	// 	<tar destfile="${dist}/freeplane_src-${ver}.tar.gz" compression="gzip" longfile="gnu">
	// 		<tarfileset prefix="freeplane-${ver}" dir="${src.temp.dir}" mode="664">
	// 			<include name="**" />
	// 		</tarfileset>
	// 		<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
	// 			<include name="${license}" />
	// 			<include name="${readme_src}" />
	// 		</tarfileset>
	// 	</tar>
	// 	<!-- build the srcpure tar file with the normalized files 
	//          (this is used for linux packages)
	//     -->
	// 	<tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
	// 		<tarfileset prefix="freeplane-${ver}" dir="${src.temp.dir}" mode="664">
	// 			<!-- this file is built from latex.flex using jflex! -->
	// 			<exclude name="freeplane_plugin_script/src-jsyntaxpane/jsyntaxpane/lexers/LaTeXLexer.java" />
	// 			<!-- these license files are in separate packages! -->
	// 			<exclude name="freeplane_plugin_openmaps/lib/Gpl.txt" />
	// 			<exclude name="freeplane_plugin_latex/lib/COPYING" />
	// 			<exclude name="freeplane_plugin_latex/lib/LICENSE" />
	// 			<!-- the flash files don't have a source in the freeplane-distrib,
	// 	             which is a problem for Debian,
	// 	             see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=736106 
	// 	             (the source is here: https://github.com/freeplane/misc/tree/master/flash-browser)
	// 	        -->
	// 			<exclude name="freeplane/resources/flash/visorFreeplane.swf" />
	// 			<exclude name="freeplane/resources/flash/flashobject.js" />
	// 			<!-- windows stuff -->
	// 			<exclude name="**/*.exe" />
	// 			<exclude name="**/*.res" />
	// 			<exclude name="**/*.jar" />
	// 			<exclude name="**/*.dll" />
	// 			<exclude name="**/*JavaApplicationStub*" />
	// 		</tarfileset>
	// 		<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
	// 			<include name="${license}" />
	// 			<include name="${readme_src}" />
	// 		</tarfileset>
	// 	</tar>
	// 	<delete dir="${src.temp.dir}" />
	// </target>

def globalDist = rootDir.path + '/DIST'
def distVersion = project.version

/*
	<target name="binzip" depends="build">
		<zip destfile="${dist}/freeplane_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane-${ver}">
				<exclude name="freeplane.sh"/>
			</zipfileset>
			<zipfileset file="${build}/freeplane.sh" filemode="775" prefix="freeplane-${ver}"/>
			<zipfileset dir="${root}" prefix="freeplane-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>
*/
task binZip(type: Zip) {
    destinationDir = new File(globalDist)
    archiveName = 'freeplane_bin-' + distVersion + '.zip'

    from(globalBuild) {
        include('**')
        exclude('freeplane.sh')
    }

    from(globalBuild) {
        include('freeplane.sh')
        fileMode = 0755
    }

    from(rootDir) {
        include('license.txt')
    }

    into('freeplane-' + distVersion)

    for (p in subprojects) {
        dependsOn p.tasks.getByPath("build")
    }
}


// some shorthands for often-used include(...)/exclude(...) specs:
def textFilesIncludeSpec(dir) {
    if (dir == null)
        return ['**/*.java',
                '**/*.xml',
                '**/*.xsl',
                '**/*.mm',
                '**/*.properties',
                '**/*.gradle']
    else
        return [dir + '/**/*.java',
                dir + '/**/*.xml',
                dir + '/**/*.xsl',
                dir + '/**/*.mm',
                dir + '/**/*.properties',
                dir + '/**/*.gradle']
}

def buildFilesIncludeSpec() {
    return ['*/build/**', '*/bin/**']
}

def miscExcludedFilesSpec() {
    return ['**/.*/**', // dot files
            '**/signjar*.properties'] // might include credentials!
}

	// 		<fileset dir="${workspace}">
	// 			<include name="build.xml" />
	// 			<include name="freeplane/**" />
	// 			<include name="freeplane_plugin*/**" />
	// 			<include name="freeplane_ant/**" />
	// 			<include name="freeplane_mac/**" />
	// 			<include name="freeplane_framework/**" />
	// 			<include name="freeplane_devresources/**" />
	// 			<include name="JOrtho_0.4_freeplane/**" />
	// 			<include name="build.xml" />
	// 			<exclude name=".*/**" />
	// 			<exclude name="**/~*" />
	// 			<exclude name="**/signjar.properties" />
	// 			<exclude name="**/backups/**" />
	// 			<exclude name="bin/**" />
	// 			<exclude name="build/**" />
	// 			<exclude name="dist/**" />
	// 			<exclude name="*/bin/**" />
	// 			<exclude name="*/build/**" />
	// 			<exclude name="*/launcher_build/**" />
	// 			<exclude name="*/build-nodehighlighter/**" />
	// 			<exclude name="*/build4mac/**" />
	// 			<exclude name="*/dist/**" />
	// 			<exclude name="**/.backup/**" />
	// 			<exclude name="**/backups/**" />
	// 			<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
	// 			<exclude name="freeplane_framework/windows-icons/Objects/**" />
	// 			<exclude name="freeplane_framework/windows-icons/*.layout" />
	// 			<exclude name="freeplane_framework/windows-icons/Makefile.win" />

	// 			<!-- these are generated using ribbons2menu.xsl! -->
	// 			<exclude name="freeplane/resources/xml/mindmapmodemenu.xml" />

	// 		</fileset>
	// 		<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
	// 			<include name="${license}" />
	// 			<include name="${readme_src}" />
	// 		</tarfileset>

// NOTE: if you change excludes here, also adapt task 'srcpureTarGz' below
// (unfortunately there is some redundancy)!
task srcTarGz(type: Tar) {
    destinationDir = new File(globalDist)
    archiveName = 'freeplane_src-' + distVersion + '.tar.gz'
    compression = 'GZIP'
    includeEmptyDirs = false

    // text files (convert to LF)
    from(rootDir) {
        include('license.txt')
        include('*.gradle')
        include(textFilesIncludeSpec('freeplane*'))
        include(textFilesIncludeSpec('JOrtho_0.4_freeplane'))

        // exclude gradle/eclipse build files for all projects:
        exclude(buildFilesIncludeSpec())
        // exclude misc files:
        exclude(miscExcludedFilesSpec())

        filter(FixCrLfFilter.class,
            eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    // all other (source) files
    from(rootDir) {
        include('freeplane*/**')
        include('JOrtho_0.4_freeplane/**')
        exclude(textFilesIncludeSpec(null))

        // exclude gradle/eclipse build files for all projects:
        exclude(buildFilesIncludeSpec())
        // exclude misc files:
        exclude(miscExcludedFilesSpec())
    }

    into('freeplane-' + distVersion)
}

	// 	<tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
	// 		<tarfileset prefix="freeplane-${ver}" dir="${src.temp.dir}" mode="664">
	// 			<!-- this file is built from latex.flex using jflex! -->
	// 			<exclude name="freeplane_plugin_script/src-jsyntaxpane/jsyntaxpane/lexers/LaTeXLexer.java" />
	// 			<!-- these license files are in separate packages! -->
	// 			<exclude name="freeplane_plugin_openmaps/lib/Gpl.txt" />
	// 			<exclude name="freeplane_plugin_latex/lib/COPYING" />
	// 			<exclude name="freeplane_plugin_latex/lib/LICENSE" />
	// 			<!-- the flash files don't have a source in the freeplane-distrib,
	// 	             which is a problem for Debian,
	// 	             see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=736106 
	// 	             (the source is here: https://github.com/freeplane/misc/tree/master/flash-browser)
	// 	        -->
	// 			<exclude name="freeplane/resources/flash/visorFreeplane.swf" />
	// 			<exclude name="freeplane/resources/flash/flashobject.js" />
	// 			<!-- windows stuff -->
	// 			<exclude name="**/*.exe" />
	// 			<exclude name="**/*.res" />
	// 			<exclude name="**/*.jar" />
	// 			<exclude name="**/*.dll" />
	// 			<exclude name="**/*JavaApplicationStub*" />
	// 		</tarfileset>
	// 		<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
	// 			<include name="${license}" />
	// 			<include name="${readme_src}" />
	// 		</tarfileset>
	// 	</tar>

def srcpureAdditionalExcludeSpec() {
    // built from latex.flex using jflex!
    return ['freeplane_plugin_jsp/src/main/java/jsyntaxpane/lexers/LaTeXLexer.java',

    // the flash files don't have a source in the freeplane-distrib,
    // which is a problem for Debian,
    // see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=736106 
    // (the source is here: https://github.com/freeplane/misc/tree/master/flash-browser)
    // => there is an (inactive) Debian package here:
    //    https://github.com/fnatter/freeplane-flash-browser-debian/
          'freeplane/resources/flash/visorFreeplane.swf', 'freeplane/resources/flash/flashobject.js',

    // windows stuff
            '**/*.exe', '**/*.res', '**/*.jar', '**/*.dll',
    // MAC stuff
            '**/*JavaApplicationStub*']

}

task srcpureTarGz(type: Tar) {
    destinationDir = new File(globalDist)
    archiveName = 'freeplane_srcpure-' + distVersion + '.tar.gz'
    compression = 'GZIP'
    includeEmptyDirs = false

    // text files (convert to LF)
    from(rootDir) {
        include('license.txt')
        include('*.gradle')
        include(textFilesIncludeSpec('freeplane*'))
        include(textFilesIncludeSpec('JOrtho_0.4_freeplane'))

        // exclude gradle/eclipse build files for all projects:
        exclude(buildFilesIncludeSpec())
        // exclude misc files:
        exclude(miscExcludedFilesSpec())
        // exclude additional srcpure stuff
        exclude(srcpureAdditionalExcludeSpec())

        filter(FixCrLfFilter.class,
            eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    // all other (source) files
    from(rootDir) {
        include('freeplane*/**')
        include('JOrtho_0.4_freeplane/**')
        exclude(textFilesIncludeSpec(null))

        // exclude gradle/eclipse build files for all projects:
        exclude(buildFilesIncludeSpec())
        // exclude misc files:
        exclude(miscExcludedFilesSpec())
        // exclude additional srcpure stuff
        exclude(srcpureAdditionalExcludeSpec())
    }

    into('freeplane-' + distVersion)
}

// meta task
task dist {
    dependsOn binZip
    dependsOn srcTarGz
    dependsOn srcpureTarGz
}

// clean
task cleanDist(type: Delete) {
    delete globalDist
}
clean.dependsOn cleanDist
