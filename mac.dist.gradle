import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

def appBundlerJar = 'freeplane_framework/mac-appbundler/appbundler-1.0.jar'
ant.taskdef(
    name: "appbundler",
    classname: 'com.oracle.appbundler.AppBundlerTask',
    classpath: appBundlerJar,
    onerror: "report"
)

task macDist {}

def defineMacBuildTasks = {boolean includeJavaRuntime -> 
    def taskName = {base -> includeJavaRuntime ? base + '_jre' : base}
    def build4mac = taskName(rootDir.path + '/BUILD4mac')
    def macappfullpath = new File(build4mac, 'Freeplane.app').absoluteFile
    
    def macosxapp = tasks.create (taskName('macosxapp')) {
    doFirst {
        delete build4mac + '/Freeplane.app'
        mkdir build4mac

        ant.appbundler(
            outputdirectory: build4mac,
            name: 'Freeplane',
            displayname: 'Freeplane',
            mainclassname: 'org.freeplane.launcher.Launcher',
            shortversion: distVersion,
            copyright: "Freeplane ${distVersion}",
            identifier: 'org.freeplane.core',
            icon: 'freeplane_framework/mac-appbundler/freeplane.icns',
            signature: '????'
        ) {
            if (includeJavaRuntime) {
                if(System.properties['appbundler.runtime.dir'] != null) {
                    runtime(dir: System.properties['appbundler.runtime.dir'])
                }
                else {
                    def javaHomeJre = System.properties['java.home']
                    def javaHome = javaHomeJre - ~/\/jre$/
                    runtime(dir: javaHome)
                }
            }
            classpath(dir: globalBuild, includes: '*.jar')
            option(value: "-Xmx512m")
            option(value: "-Dapple.laf.useScreenMenuBar=true")
            option(value: "-Xdock:name=Freeplane")
        }

        def dist_macos_info = macappfullpath.path + '/Contents/Info.plist'
        ant.xslt(in: new File(dist_macos_info),
            style: new File('freeplane_framework/mac-appbundler/mac_info_plist.xslt'),
            out: new File(dist_macos_info + '2')
        )
        java.nio.file.Files.move(java.nio.file.Paths.get(dist_macos_info + '2'),
                                 java.nio.file.Paths.get(dist_macos_info),
                   java.nio.file.StandardCopyOption.REPLACE_EXISTING)

        def macjavafullpath = macappfullpath.path + '/Contents/Java'
        copy {
            from(globalBuild) {
                 exclude('**/*.bat')
                 exclude('**/*.exe')
                 exclude('*.jar')
            }
            into(macjavafullpath)
        }

        def macresourcesfullpath = macappfullpath.path + '/Contents/Resources'
        copy {
             from('freeplane_framework/mac-appbundler') {
                 include('freeplanedoc.icns')
             }
             into(macresourcesfullpath)
        }
        }
        for (p in subprojects) {
            dependsOn p.tasks.getByPath("build")
        }
    }

    def dmg4mac= tasks.create (taskName('dmg4mac'), Exec) {
        onlyIf { Os.isFamily(Os.FAMILY_MAC) }
        def dmgPath = globalDist + taskName('/freeplane_app') + '-' + distVersion + '.dmg';
        doFirst { 
            mkdir globalDist 
            file(dmgPath).delete()
        } 

        commandLine 'hdiutil', 'create', '-srcfolder', macappfullpath.path,
            dmgPath

        dependsOn macosxapp
    }

    def zip4mac = tasks.create (taskName('zip4mac'), Zip) {
        onlyIf { ! Os.isFamily(Os.FAMILY_MAC) }
        destinationDir = new File(globalDist)
        archiveName = taskName('freeplane_macos_bin') + '-' + distVersion + '.zip'

        from(build4mac) {
            exclude('**/JavaAppLauncher')
        }
        from(build4mac) {
            include('**/JavaAppLauncher')
            fileMode = 0775
        }

        into('freeplane-' + distVersion)
        dependsOn macosxapp
    }
    
    def cleanMac = tasks.create (taskName('cleanMac'), Delete) {
        delete build4mac
    }

    macDist.dependsOn dmg4mac, zip4mac
    
    clean.dependsOn cleanMac
}

if (Os.isFamily(Os.FAMILY_MAC)) {
    defineMacBuildTasks(true)
}
defineMacBuildTasks(false)
