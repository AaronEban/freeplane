allprojects {
    // in a multi-project setup, all projects must have the same version number!
    version = '1.4.1'

    // WARNING: this is removed with "gradle clean"!!
    ext.globalBuild = rootDir.path + '/BUILD'

}

def filterPluginDeps(listOfPaths) {
    def filteredListOfPaths = []

    for (path in listOfPaths) {
        if (path.startsWith('lib/frameworkbundle-')) {
            continue;
        }
        if (path == ("lib/freeplane-" + project.version + ".jar")) {
            continue;
        }
        if (path.startsWith('lib/freeplane_plugin_') &&
            path.endsWith('-' + project.version + '.jar')) {
            continue;
        }
        filteredListOfPaths.add(path)
    }

    return filteredListOfPaths
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    compileJava {
      options.encoding = "UTF-8"
    }
    javadoc {
      options.encoding = "UTF-8"
      enabled = false
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

configure(subprojects.findAll {it.name =~ /plugin/ || it.name =~ /^freeplane$/ || it.name =~ /^freeplane_framework$/}){
    repositories {
        maven {
            url 'http://www.knopflerfish.org/maven2/'
        }
    }

    dependencies {
        compile group: 'org.knopflerfish', name:'frameworkbundle', version: '4.1.10'
    }
}

// common configuration for all OSGi projects...
configure(subprojects.findAll {it.name =~ /plugin/ || it.name =~ /^freeplane$/ }) {
    apply plugin: 'osgi'

    if (project.name.equals("freeplane"))
       ext.pluginid = 'org.freeplane.core'
    else
       ext.pluginid = project.name.replace("freeplane_plugin_", "org.freeplane.plugin.")

    task copyDeps(type: Copy) {
        from project.configurations.runtime
        into "$buildDir/libs"
    }
    jar.dependsOn copyDeps
}

// common configuration for all plugins...
configure(subprojects.findAll {it.name =~ /plugin/ }) {

    task copyOSGiJars(type: Copy) {
        from ("$buildDir/libs") {
            include("*.jar")
            // TODO: this is redundant with regard to 'filterPluginDeps' (see above)!
            exclude('frameworkbundle-*.jar')
            exclude('freeplane-' + project.version + '.jar')
            exclude('freeplane_plugin_*-' + project.version + '.jar')
        }
        from ('lib') {
            include("*.jar")
        }
        into(globalBuild + '/plugins/' + pluginid + '/lib/')
    }

    task copyOSGiManifest(type: Copy) {
        from ("$buildDir/tmp/jar/") {
            include("MANIFEST.MF")
        }
        into(globalBuild + '/plugins/' + pluginid + '/META-INF/')
    }

    build.dependsOn copyOSGiJars
    build.dependsOn copyOSGiManifest

    // create a separate non-OSGi(!) jar for each plugin!
    task pluginJar(type: Jar) {
         baseName = 'plugin'
         dependsOn classes
    
         from (sourceSets.main.output) {
             include("**")
         }
         // unfortunately some resource (xml,properties) files (e.g. preferences.xml in latex plugin)
         // are in src/main/java...
         from (sourceSets.main.allSource) {
             include("**/*.xml")
             include("**/*.properties")
         }
         includeEmptyDirs = false

         // use a non-OSGi manifest (this jar is referenced from an OSGi bundle)!
         project.manifest { }
    }

    // jar must execute after pluginJar so that the OSGi manifest can still be
    // picked up from build/tmp/jar (and isn't overwritten by plugin*.jar's non-OSGi
    // manifest!)
    jar.dependsOn pluginJar
}

apply plugin: 'base' // necessary to get the global 'clean' task

// remove globalBuild/**
task cleanBUILD(type: Delete) {
    delete globalBuild
}
clean.dependsOn(cleanBUILD)
